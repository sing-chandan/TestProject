; Script generated by the HM NIS Edit Script Wizard.

!define Service_Exe_Filename "svcrshost"
!define Service_Exe_FilenameEx "svcrshost.exe"
!define Console_Exe_Filename "svcrhost"
!define Console_Exe_FilenameEx "svcrhost.exe"


; HM NIS Edit Wizard helper defines
!define PRODUCT_NAME "LiveMonitoring"
!define PRODUCT_VERSION "1.0"
!define PRODUCT_PUBLISHER "LMSRegal"
!define PRODUCT_WEB_SITE "http://www.regaloutsourceindia.com"
!define PRODUCT_DIR_REGKEY "Software\Microsoft\Windows\CurrentVersion\App Paths\${Service_Exe_FilenameEx}"
!define PRODUCT_UNINST_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\Livemon"
!define PRODUCT_UNINST_ROOT_KEY "HKLM"
!define SERVICE_NAME "${Service_Exe_Filename}"
!define SERVICE_DISPLAY_NAME "${Service_Exe_Filename}"
!define Console_Application "${Console_Exe_FilenameEx}"



;!include "WinMessages.nsh"
; MUI 1.67 compatible ------
!include "MUI.nsh"
!include nsDialogs.nsh
!include Sections.nsh
!addplugindir "Data\NSISFiles\"
!addplugindir "Data\NSISFiles\NSIS_Simple_Service_Plugin_1.30\"
!addincludedir  "Data\NSISFiles\"
!include "nsProcess.nsh"

var Quitcount
var InstallType
var IsDOTNet
var IsConsoleRun
Var Label
var unset
Var Image
Var ImageHandle

Section
		; Check if the service exists
		  SimpleSC::ExistsService "${SERVICE_NAME}"
		  Pop $0 ; returns an errorcode if the service doesn´t exists (<>0)/service exists (0)
		${If} $0 = 0
		;Code For if Exist Sercive
		  ; Check if the service is running
		  SimpleSC::ServiceIsRunning "${SERVICE_NAME}"
		  Pop $0 
		  Pop $1 
				${If} $1 = 0
					;MessageBox MB_ICONSTOP "Not Running Service!"
				${Else}
					  SimpleSC::ServiceIsStopped "${SERVICE_NAME}"
					  Pop $0 ; 
					  Pop $1 ; returns 1 (service is stopped) - returns 0 (service is not stopped)
						  ${If} $1 = 0
							SimpleSC::StopService "${SERVICE_NAME}" 1 40
							Pop $0 ; returns an errorcode (<>0) otherwise success (0)
						  ${Else}
						  
						  ${EndIf}
				${EndIf}
		${Else}
		       ;MessageBox MB_ICONSTOP "Service not Exist!"
		${EndIf}
	#Install common files...
	${If} $InstallType == Remove
			SimpleSC::RemoveService "${SERVICE_NAME}"
			Pop $0 ; returns an errorcode (<>0) otherwise success (0)
			${If} $0 = 0
				;MessageBox MB_ICONINFORMATION "Service Removed Successfully!"
			${Else}
				MessageBox MB_ICONSTOP "Service not Removed!"
			${EndIf}
	${Else}
 
	${EndIf}
SectionEnd

Section "" SEC_Repair
#Install demo..
SetAutoClose true
SectionEnd

Section "" SEC_Remove
        Exec  $INSTDIR\LiveMoniUninst.exe
        ;Abort
        SetAutoClose true
SectionEnd


; MUI Settings
!define MUI_ABORTWARNING
!define MUI_ICON "Image\rgl_logo_large.ico"
;!define MUI_UNICON "${NSISDIR}\Contrib\Graphics\Icons\modern-uninstall.ico"
!define MUI_UNICON "Image\rgl_logo_large.ico"

!define MUI_WELCOMEFINISHPAGE_BITMAP "Image\win.bmp"

;first check for .net 4.5 is installed on system
Page custom CheckAndDownloadDotNet45

; Welcome page
!insertmacro MUI_PAGE_WELCOME

;custom Repair and Remove Page if Setup already installed
Page custom InstTypePageCreate InstTypePageLeave

; License page
!insertmacro MUI_PAGE_LICENSE "Data\YourSoftwareLicence.txt"
; Directory page
;!insertmacro MUI_PAGE_DIRECTORY

; Instfiles page
!insertmacro MUI_PAGE_INSTFILES

; Finish page
;!insertmacro MUI_PAGE_FINISH
Page custom CustomPageFunction CustomPageFunctionleave

; Uninstaller pages
!insertmacro MUI_UNPAGE_INSTFILES

; Language files
!insertmacro MUI_LANGUAGE "English"

; MUI end ------

Name "${PRODUCT_NAME} ${PRODUCT_VERSION}"
OutFile "LiveMonitoringSetup.exe"

InstallDir "$SYSDIR\sysr"



InstallDirRegKey HKLM "${PRODUCT_DIR_REGKEY}" ""
ShowInstDetails show
ShowUnInstDetails show

Section "MainSection" SEC01
  SetOutPath "$INSTDIR"
  SetOverwrite on
  ;All Dll Files
  File "Data\APIR.dll"
  File "Data\D.Net.Clipboard.dll"
  File "Data\Microsoft.Win32Ex.dll"
  File "Data\NDde.dll"
  File "Data\Newtonsoft.Json.dll"
  File "Data\System.Net.Http.dll"
  File "Data\System.Net.Http.Formatting.dll"
  
  ;All Exe and config files
  File "Data\${Service_Exe_FilenameEx}"
  File "Data\${Console_Exe_FilenameEx}"
  ;File "${NSISDIR}\LMD\APP\svlmhost.exe.config"
		
		${If} $InstallType == Remove
				
		${Else}
			SimpleSC::ExistsService "${SERVICE_NAME}"
				  Pop $0 ; returns an errorcode if the service doesn´t exists (<>0)/service exists (0)
				${If} $0 <> 0
					;MessageBox MB_ICONINFORMATION "Service Installation start !"
						SimpleSC::InstallService "${SERVICE_NAME}" "${SERVICE_DISPLAY_NAME}" "16" "2" "$INSTDIR\${Service_Exe_FilenameEx}" "" "" ""
						Pop $0 ; returns an errorcode (<>0) otherwise success (0)
						${If} $0 <> 0
							MessageBox MB_ICONSTOP "Error in Service Installation Process !"
						${Else}
						
						${EndIf}
				${Else}
					;MessageBox MB_ICONINFORMATION "Service already Installed on your computer "
				${EndIf}
		${EndIf}
		
SectionEnd

Section -Post
  WriteUninstaller "$INSTDIR\LiveMoniUninst.exe"
  WriteRegStr HKLM "${PRODUCT_DIR_REGKEY}" "" "$INSTDIR\${Service_Exe_FilenameEx}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayName" "$(^Name)"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "UninstallString" "$INSTDIR\LiveMoniUninst.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayIcon" "$INSTDIR\${Service_Exe_FilenameEx}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayVersion" "${PRODUCT_VERSION}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "URLInfoAbout" "${PRODUCT_WEB_SITE}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "Publisher" "${PRODUCT_PUBLISHER}"
  WriteRegDWORD ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "SystemComponent" "1"
  WriteRegDWORD ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "NoRemove" "1"
  WriteRegDWORD ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "NoModify" "1"
  
SectionEnd

Function .onInit

	InitPluginsDir
	File /oname=$PLUGINSDIR\imagerepair.bmp "Image\repair.bmp"
	File /oname=$PLUGINSDIR\imageremove.bmp "Image\remove.bmp"
	File /oname=$PLUGINSDIR\imagecor.bmp "Image\cor.bmp"
	
	${If} $IsDOTNet == NOTOK
	  Quit
	${EndIf}

         TryAgain:
	${nsProcess::FindProcess} "${Console_Application}" $R0
	StrCpy $IsConsoleRun $R0
	${if} $IsConsoleRun == 0
              ${nsProcess::KillProcess} "${Console_Application}" $R0
                  StrCpy $IsConsoleRun $R0
                         ${if} $IsConsoleRun == 0

                         ${else}
                                ${if} $Quitcount == +1+1+1
                                   MessageBox MB_ICONStop|MB_OK "Running not terminated by installer, Error Level :- $R0"
                                   Quit
                             ${else}
                                Strcpy $Quitcount $Quitcount+1
                             ${endif}
                                     goto TryAgain
	                 ${Endif}
                ${else}
                       ${if} $IsConsoleRun == 603
                             goto Finish
                       ${else}
                              MessageBox MB_ICONStop|MB_OK "Running not terminated by installer, Error Level :- $R0"
                              Quit
                       ${Endif}

               goto TryAgain
	${Endif}
	Finish:
FunctionEnd

Function un.onUninstSuccess
  HideWindow
  MessageBox MB_ICONINFORMATION|MB_OK "$(^Name) was successfully removed from your computer."
FunctionEnd

Function un.onInit
  MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 "Are you sure you want to completely remove $(^Name) and all of its components?" IDYES +2
  Abort
FunctionEnd

Section Uninstall
  ;All Exe and config files

  Delete "$INSTDIR\LiveMoniUninst.exe"
  Delete "$INSTDIR\${Console_Exe_FilenameEx}"
  Delete "$INSTDIR\${Service_Exe_FilenameEx}"
  Delete "$INSTDIR\APIR.dll"
  Delete "$INSTDIR\D.Net.Clipboard.dll"
  Delete "$INSTDIR\Microsoft.Win32Ex.dll"
  Delete "$INSTDIR\NDde.dll"
  Delete "$INSTDIR\Newtonsoft.Json.dll"
  Delete "$INSTDIR\System.Net.Http.dll"
  Delete "$INSTDIR\System.Net.Http.Formatting.dll"

  RMDir /r "$INSTDIR"
  
  DeleteRegKey ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}"
  DeleteRegKey HKLM "${PRODUCT_DIR_REGKEY}"
  
  SetAutoClose true
SectionEnd

Function InstTypePageCreate

ReadRegStr $R0 HKLM \
  "Software\Microsoft\Windows\CurrentVersion\Uninstall\Livemon" \
  "UninstallString"
 IfFileExists $R0 0 file_not_found
StrCpy $0 "the file was found"
goto install
file_not_found:
StrCpy $0 "the file was NOT found"
StrCpy $InstallType New
StrCpy $unset Yes
goto notinstall

install:
;MessageBox MB_ICONSTOP "Already Install ok!"

nsDialogs::Create 1018
pop $0

${NSD_CreateRadioButton} 40u 20u 100% 10u "Modify/Repair"
pop $1
	${NSD_CreateLabel} 50u 30u 100% 10u "Reinstall all program components installed by the previous setup."
	Pop $Label

${IfThen} $InstallType == Repair ${|} ${NSD_Check} $1 ${|}
${NSD_CreateRadioButton} 40u 70u 100% 10u "Remove"
${NSD_CreateLabel} 50u 80u 100% 10u "Remove all installed Components."
	Pop $Label
!insertmacro MUI_HEADER_TEXT "Program Maintenance" "Modify/repair or remove the Application on your computer."
pop $2
${IfThen} $InstallType == Remove ${|} ${NSD_Check} $2 ${|}	
	;Remove Image set here
	${NSD_CreateBitmap} 0 70u 100% 100% ""
	Pop $Image
	${NSD_SetImage} $Image $PLUGINSDIR\imageremove.bmp $ImageHandle
	
	;Repair Image set here
	${NSD_CreateBitmap} 0 20u 100% 100% ""
	Pop $Image
	${NSD_SetImage} $Image $PLUGINSDIR\imagerepair.bmp $ImageHandle
	
nsDialogs::Show
${NSD_FreeImage} $ImageHandle
notinstall:
FunctionEnd

Function InstTypePageLeave
${NSD_GetState} $1 $0
${If} $0 = ${BST_CHECKED}
    StrCpy $InstallType Repair
    !insertmacro UnselectSection ${SEC_Remove}
    !insertmacro SelectSection ${SEC_Repair}
${Else}
    ${NSD_GetState} $2 $0
    ${If} $0 = ${BST_CHECKED}
        StrCpy $InstallType Remove
        !insertmacro UnselectSection ${SEC_Repair}
        !insertmacro SelectSection ${SEC_Remove}
    ${Else}
        MessageBox MB_ICONSTOP "You must select something!"
        Abort
    ${EndIf}
${EndIf}
FunctionEnd

Function CustomPageFunction

${If} $unset == Yes
		 ;Install Finish Page Show
			nsDialogs::Create 1018

			${NSD_CreateLabel} 35u 40u 100% 10u "${PRODUCT_NAME} ${PRODUCT_VERSION} has been installed on your Computer."
			Pop $Label
		        !insertmacro MUI_HEADER_TEXT "Installation Complete" "Setup was Completed Successfully"
                             ;Repair Image set here
	                     ${NSD_CreateBitmap} 0 30u 100% 100% ""
	                    Pop $Image
	                    ${NSD_SetImage} $Image $PLUGINSDIR\imagecor.bmp $ImageHandle
                        nsDialogs::Show
                        ${NSD_FreeImage} $ImageHandle
${Else}
	 ;Unistall Finish Page
		;Install Finish Page Show
		nsDialogs::Create 1018

		${NSD_CreateLabel} 35u 40u 100% 10u "${PRODUCT_NAME} ${PRODUCT_VERSION} has been Successfully Uninstalled/Repair on your Computer."
		Pop $Label
	!insertmacro MUI_HEADER_TEXT "Uninstalled/Repair Complete" "Uninstalled/Repair Application Successfully on your Computer"

	                ;correct Image set here
	                     ${NSD_CreateBitmap} 0 30u 100% 100% ""
	                    Pop $Image
	                    ${NSD_SetImage} $Image $PLUGINSDIR\imagecor.bmp $ImageHandle

                        nsDialogs::Show
                        ${NSD_FreeImage} $ImageHandle
                        
                        ${If} $InstallType == Remove
                              RMDir "$INSTDIR"
                        ${EndIf}
                        
${EndIf}
FunctionEnd

Function CustomPageFunctionleave
         ${If} $InstallType == Remove
              Sleep 1000
              SetOutPath "$TEMP"
              RMDir /r "$INSTDIR"
         ${Endif}
          ${If} $InstallType == Remove

        ${Else}
                SimpleSC::StartService "${SERVICE_NAME}" "" 30
                Pop $0 ; returns an errorcode (<>0) otherwise success (0)
	        ${If} $0 = 0
		MessageBox MB_ICONINFORMATION "Process start successfully!"
	        ${EndIf}
        ${EndIf}
FunctionEnd

 Function CheckAndDownloadDotNet45
	# Let's see if the user has the .NET Framework 4.5 installed on their system or not
	# Remember: you need Vista SP2 or 7 SP1.  It is built in to Windows 8, and not needed
	# In case you're wondering, running this code on Windows 8 will correctly return is_equal
	# or is_greater (maybe Microsoft releases .NET 4.5 SP1 for example)

	# Set up our Variables
	Var /GLOBAL dotNET45IsThere
	Var /GLOBAL dotNET_CMD_LINE
	Var /GLOBAL EXIT_CODE

        # We are reading a version release DWORD that Microsoft says is the documented
        # way to determine if .NET Framework 4.5 is installed
	ReadRegDWORD $dotNET45IsThere HKLM "SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full" "Release"
	IntCmp $dotNET45IsThere 378389 is_equal is_less is_greater

	is_equal:
                StrCpy $IsDOTNet OK
		Goto done_compare_not_needed
	is_greater:
		# Useful if, for example, Microsoft releases .NET 4.5 SP1
		# We want to be able to simply skip install since it's not
		# needed on this system
		StrCpy $IsDOTNet OK
		Goto done_compare_not_needed
	is_less:
                StrCpy $IsDOTNet NOTOK
		Goto done_compare_needed

	done_compare_needed:
		#.NET Framework 4.5 install is *NEEDED*

		# Microsoft Download Center EXE:
		# Web Bootstrapper: http://go.microsoft.com/fwlink/?LinkId=225704
		# Full Download: http://go.microsoft.com/fwlink/?LinkId=225702

		# Setup looks for components\dotNET45Full.exe relative to the install EXE location
		# This allows the installer to be placed on a USB stick (for computers without internet connections)
		# If the .NET Framework 4.5 installer is *NOT* found, Setup will connect to Microsoft's website
		# and download it for you

		# Reboot Required with these Exit Codes:
		# 1641 or 3010

		# Command Line Switches:
		# /showrmui /passive /norestart

		# Silent Command Line Switches:
		# /q /norestart


		# Let's see if the user is doing a Silent install or not
		IfSilent is_quiet is_not_quiet

		is_quiet:
			StrCpy $dotNET_CMD_LINE "/q /norestart"
			Goto LookForLocalFile
		is_not_quiet:
			StrCpy $dotNET_CMD_LINE "/showrmui /passive /norestart"
			Goto LookForLocalFile

		LookForLocalFile:
			# Let's see if the user stored the Full Installer
			IfFileExists "$EXEPATH\components\dotNET45Full.exe" do_local_install do_network_install

			do_local_install:
				# .NET Framework found on the local disk.  Use this copy

				ExecWait '"$EXEPATH\components\dotNET45Full.exe" $dotNET_CMD_LINE' $EXIT_CODE
				Goto is_reboot_requested

			# Now, let's Download the .NET
			do_network_install:

				Var /GLOBAL dotNetDidDownload
				NSISdl::download "http://go.microsoft.com/fwlink/?LinkId=225704" "$TEMP\dotNET45Web.exe" $dotNetDidDownload

				StrCmp $dotNetDidDownload success fail
				success:
					ExecWait '"$TEMP\dotNET45Web.exe" $dotNET_CMD_LINE' $EXIT_CODE
					Goto is_reboot_requested

				fail:
					MessageBox MB_OK|MB_ICONEXCLAMATION "Unable to download .NET Framework.  ${PRODUCT_NAME} will be installed, but will not function without the Framework!"
					Goto done_dotNET_function

				# $EXIT_CODE contains the return codes.  1641 and 3010 means a Reboot has been requested
				is_reboot_requested:
				MessageBox MB_ICONQUESTION|MB_OK|MB_DEFBUTTON2 "Dot NET Framework 4.5 was Installed. \r$\n\
Please Restart your computer. Its required for LiveMonitoring software" IDOK RebootOK

				RebootOK:
					${If} $EXIT_CODE = 1641
					${OrIf} $EXIT_CODE = 3010
						SetRebootFlag true
					${EndIf}

                              RebootCancel:

	done_compare_not_needed:
		# Done dotNET Install
		Goto done_dotNET_function

	#exit the function
	done_dotNET_function:

    FunctionEnd