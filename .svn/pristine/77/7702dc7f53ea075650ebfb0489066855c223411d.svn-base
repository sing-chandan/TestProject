@model LiveMonitoringWeb.Models.Configuration

@{
    var role = System.Web.Security.Roles.GetRolesForUser(WebSecurity.CurrentUserName);
    if (role[0] == "Admin")
    {
        Layout = "~/Views/Shared/_Layout_AdminOuth.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/_Layout_Outh.cshtml";
    }
    ViewBag.Title = "Edit";
}
<div class="container">
    <div class="row">

        <div class="col-sm-12">
            <h3><span class="glyphicon glyphicon-cog"></span> Configuration [Time Interval(sec.)] &#58;&#58; Edit</h3>
            <hr />
        </div>
        <div class="col-sm-1"></div><div class="col-sm-10" style="margin-bottom:100px;">

            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true)
                @Html.HiddenFor(model => model.ConfigurationId)
                <div>
                    @{
                var message = string.Empty;
                if (ViewBag.Message != null)
                {
                    message = ViewBag.Message;
                }
                <label style="color:red;">@message</label>

                    }
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.BrowserTacker_Interval, new { @class = "labeltop" })
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.BrowserTacker_Interval, new { @class = "textarea1" })
                    @Html.ValidationMessageFor(model => model.BrowserTacker_Interval)
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.ScreenShot_Interval, new { @class = "labeltop" })
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.ScreenShot_Interval, new { @class = "textarea1" })
                    @Html.ValidationMessageFor(model => model.ScreenShot_Interval)
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.MachineIdle_Interval, new { @class = "labeltop" })
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.MachineIdle_Interval, new { @class = "textarea1" })
                    @Html.ValidationMessageFor(model => model.MachineIdle_Interval)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.MachineIdle_MinTime, new { @class = "labeltop" })
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.MachineIdle_MinTime, new { @class = "textarea1" })
                    @Html.ValidationMessageFor(model => model.MachineIdle_MinTime)
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.KeyLogger_Interval, new { @class = "labeltop" })
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.KeyLogger_Interval, new { @class = "textarea1" })
                    @Html.ValidationMessageFor(model => model.KeyLogger_Interval)
                </div>

                 <div class="editor-label">
                    @Html.LabelFor(model => model.KeyLogger_MinTime, new { @class = "labeltop" })
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.KeyLogger_MinTime, new { @class = "textarea1" })
                    @Html.ValidationMessageFor(model => model.KeyLogger_MinTime)
                </div>
                
                <div class="editor-label">
                    @Html.LabelFor(model => model.AppTracker_Interval, new { @class = "labeltop" })
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.AppTracker_Interval, new { @class = "textarea1" })
                    @Html.ValidationMessageFor(model => model.AppTracker_Interval)
                </div>

                <div class="editor-label">
                    <span>
                        @Html.EditorFor(model => model.IsActive)
                        @Html.ValidationMessageFor(model => model.IsActive)
                    </span> @Html.LabelFor(model => model.IsActive, new { @class = "labelck" })
                </div>
                   <div class="editor-label">
                    <span>
                        @Html.EditorFor(model => model.IsSendBlockData)
                        @Html.ValidationMessageFor(model => model.IsSendBlockData)
                    </span> @Html.LabelFor(model => model.IsSendBlockData, new { @class = "labelck" })
                </div>
                
                <div class="editor-field">
                </div>
                <p style="padding-top:10px;">
                    <input type="submit" value="Save" class="button-link" /> | @Html.ActionLink("Back to List", "Index")
                </p>
            }
            
        </div>
    </div>
</div>